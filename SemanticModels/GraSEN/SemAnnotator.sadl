 // can I identify some of the constants missing in PID and PID-simplified that I was getting originally???
 
 // We do not identify "PI-Controller with saturation"
 // not properly handling PI inline
 // can I get qualified name for controller?
 // note in PI with typo, we identify a type and then say it is P-Controller; I could refine the rule

// TBD: test and refine as needed ig multiple controllers present in a file.

// ISSUES upstream
// 		in PI with ptr, integrator_state is being identified as a constant
// 		for RETURN_VAL, the json incorrectly says that it is from source; similarly for PID_realize_ARG_0

// Not what I can handle
// 		error_last does not have line begin; is it present in json file? once this is resolved then
//			need to check for "error_last = error" is present
//		not checking error_last = error as it does not seem to be present correctly in the input file
 
uri "http://sadl.org/SemAnnotator.sadl" alias semannotator.

import "http://www.w3.org/1999/02/22-rdf-syntax-ns".
import "http://grasen.ge.com/SemanticAnalysisModel.sadl". 

// Do we need the transitive rules, Transitive1 needs to be modified is needed?
// Rule Transitive1 
// if cls1 rdfs:subClassOf cls2
// and cls2 rdfs:subClassOf cls3
// then cls1 rdfs:subClassOf cls3.


///////////// Stage 0 /////////////////// 

//Stage 0
// Rule Transitive0
//if inst is a cls
//   and cls is a type of cls2
//then inst is a cls2.
//Stage 1
// Rule Transitive1  
//if inst is a cls
//   and cls is a type of cls2
//then inst is a cls2.
Stage 2
 Rule Transitive2  
if inst is a cls
   and cls is a type of cls2
then inst is a cls2.
Stage 3
 Rule Transitive3  
if inst is a cls
   and cls is a type of cls2
then inst is a cls2.
Stage 4
 Rule Transitive4  
if inst is a cls
   and cls is a type of cls2
then inst is a cls2.


//Must be Stage 0
Rule explicitVarR
if	    x is a Variable
	and from_source of metadata of x is true
then x is an ExplicitVariable.

// Must be Stage 0
Rule literalInitializedR1
if		edge function f
	and f ftype "LITERAL"
	and edge outputs var
	and var is an ExplicitVariable //Stage 0
then  var is a LiteralInitialized .

///////////// Stage 1 /////////////////// 
// Must be Stage 1
Stage 1 Rule varNameR
if 	    x is a Variable
	and x identifier id
	and xn is strafter(strbefore(strafter(strafter(id,"::"),"::"),"::"),"\\\\.")
then x varName xn.

// Must be Stage 1
Stage 1 Rule varInBlockR
if		var is a Variable
	and b is a SubGraph
	and b nodes var
then var inBlock b.

// Must be Stage 1
Stage 1 Rule sameVarR1
if 		x1 is a Variable
	and x2 is a Variable
	and x1 inBlock block
	and x2 inBlock block
	and x1 != x2
	and varName of x1 == varName of x2 // Stage 1
then x1 sameVar x2.

Stage 1 Rule sameVarR2
if 		x1 is a Variable
	and x2 is a Variable
	and x1 inBlock block1
	and x2 inBlock block2
	and block2 parent block1
	and varName of x1 == varName of x2
then    x1 sameVar x2
	and x2 sameVar x1.
	
Stage 1 Rule sameVarInterfaceR
if 		x1 is a Variable
	and x2 is a Variable
	and edge function fun
	and fun ftype "INTERFACE"
	and edge inputs x1 //AM 11/13 moved it lower
	and edge outputs x2
	and x1 != x2
	and varName of x1 == varName of x2
then    x1 sameVar x2
    and x2 sameVar x1.	

Stage 1 Rule sameVarStructureR1
if 		x1 is a Variable
	and e1 function fun1
	and fun1 ftype "PACK"
	and e1 inputs x1
	and x2 is a Variable
	and e2 function fun2
	and fun2 ftype "PACK"
	and e2 inputs x2
	and x1 != x2
	and varName of x1 == varName of x2
then x1 sameVar x2.

Stage 1 Rule sameVarStructureR2
if 		x1 is a Variable
	and e1 function fun1
	and fun1 ftype "PACK"
	and e1 inputs x1
	and x2 is a Variable
	and e2 function fun2
	and fun2 ftype "EXTRACT"
	and e2 outputs x2
	and e1 outputs struct1 //AM 11/13 moved it lower
	and e2 inputs struct2
	and varName of struct1 == varName of struct2
	and x1 != x2
	and varName of x1 == varName of x2
then    x1 sameVar x2
    and x2 sameVar x1.

// Must be Stage 1
Stage 1 Rule loopBlockR
if	 node sg_type "LoopContainer"
then node is a LoopBlock.
	
//Commented out as it's not being used
//Rule funcBlockR
//if	 node sg_type "FuncContainer"
//then node is a FunctionBlock.

//Commented out as it's not being used
//Rule nestedBlockR
//if		node is a SubGraph
//	and node parent par
//then node is a NestedBlock.

//Not using it
//Rule structureVariableR
//if	edge function fun
//	and fun ftype "PACK"
//	and edge outputs var
//then var is a Structure.

//Find parameter argument pairs.
// Must be Stage 1
Stage 1 Rule argParamPairR
if	edge is a HyperEdge
	and edge function fun
	and fun ftype "INTERFACE"
	and grph nodes fun
	and sg_type of grph != "LoopContainer"
	and edge inputList inList
	and edge outputList outList
	and arg is a Variable
	and param is a ExplicitVariable //Stage 0
	and _idx is index of arg in inList
	and _idx is index of param in outList
then
	there exists an ArgParamPair pair
	and edge argumentParameterPair pair
	and pair parameter param
	and pair argument arg. 

//LHS rules must be stage 1
Stage 1 Rule lhsR1 
if	 var is LiteralInitialized // Stage 0
then var is a LHS.

Stage 1 Rule lhsR2
if		edge is a HyperEdge
   	and edge outputs var
   	and var is an ExplicitVariable
   	and edge function fun
   	and fun ftype "ASSIGN"
then 
	var is a LHS.

//a parameter assigned an argument is also a LHS
Stage 1 Rule lhsR3
if	pair parameter param  //Stage 1
	and pair argument arg
then
	param is a LHS.
	
Stage 1 Rule lhsR4 //LHS of function call 
if		edge is a HyperEdge
   	and edge outputs var  //   	and from_source of metadata of var is true //only look at explicit vars
   	and var is an ExplicitVariable
   	and edge function fun
   	and fun ftype "INTERFACE"
   	and edge inputs ret
   	and ret varName "RETURN_VAL"
then 
	var is a LHS.

Stage 1 Rule notConstantR1
if		var1 is a LHS
	and var2 is a LHS 
	and var1 sameVar var2 // Stage 1
	and edge inputs var1
	and edge outputs var2
	and edge function fun
then
	var1 is a NotConstant
	and var2 is a NotConstant.

Stage 1 Rule notConstantR2
if		var is a LHS
	and var is not a LiteralInitialized // Hence Stage 1
	and var inBlock block //Stage 1
	and block is a LoopBlock
then var is a NotConstant.

Stage 1 Rule notConstantR3
if	pair parameter param
	and pair argument arg
	and arg is a NotConstant
then
	param is a NotConstant.

Stage 1 Rule notConstantR4
if	var1 is an ExplicitVariable
	and var2 is a NotConstant
	and var1 sameVar var2
	and gph nodes var1
	and gph nodes var2
then
	var1 is a NotConstant.
	
Stage 1 Rule notConstantR5
if	edge function fun
	and edge inputs var1
	and edge outputs var2
	and var1 sameVar var2
	and grph nodes fun
	and grph sg_type "LoopContainer"
	and var2 is a NotConstant
then
	var1 is a NotConstant.	
	
Stage 1 Rule notConstantR6
if		edge function f
	and f ftype "ASSIGN"
	and edge outputs var
	and var is an ExplicitVariable
	and edge inputs varI
	and varI is a NotConstant
then
	var is a NotConstant.

Stage 1
Rule SGConditionR1 //If without Else
if	sg is a SubGraph
	and sg nodes condFun
	and condFun ftype "CONDITION"
	and condFun nodes opNode
	and opNode operator oper //ex: "Gt"
	and opNode children complist
	and cL is element 0 of complist
	and cL grfn_uid comparandL //saturate.IF_0::input::-1
	and cR is element 1 of complist
	and cR grfn_uid comparandR //saturate.IF_0::upper_threshold::-1
	and sg nodes assignFun1
	and assignFun1 ftype "ASSIGN"
	and hypE1 function assignFun1
	and hypE1 inputs comparandR //saturate.IF_0::upper_threshold::-1
	and hypE1 outputs outvariable //saturate.IF_0::output::-1
	
then
	sg is a SimpleIfConditional
	and sg comparandLeft comparandL
	and sg comparandRight comparandR 
	and sg condOperator oper
	and sg ifVar comparandR 
	and sg outputVar outvariable
.

//Stage 1
//Rule simpleIfConditionalR1 //If without Else
//if	sg is a SubGraph
//	and sg outputVar outvariable
//	//Constraint: this outvariable is assigned the true case variable
////	and sg nodes decisionNode
////	and decisionNode nodes ifexprFun
////	and ifexprFun operator "IfExpr"
////	and ifexprFun children iflist
////	and truecasev is element 1 of iflist ////output_0 saturate.IF_0::output::-1
////	and truecasev grfn_uid outvariable // the true case variable is the output in the Assign
//then
//	sg is a SimpleIfConditional
//.

//Stage 1
//Rule simpleIfConditionalR2 //If without Else
//if	sg is a SubGraph
//	and sg outputVar outvariable
////	and sg nodes condFun
////	and condFun ftype "CONDITION"
////	and condFun nodes opNode
////	and opNode operator oper //ex: "Gt"
////	and opNode children complist
////	and cL is element 0 of complist
////	and cL grfn_uid comparandL //saturate.IF_0::input::-1
////	and cR is element 1 of complist
////	and cR grfn_uid comparandR //saturate.IF_0::upper_threshold::-1
////	and sg nodes assignFun1
////	and assignFun1 ftype "ASSIGN"
////	and hypE1 function assignFun1
////	and hypE1 inputs ifvariable //saturate.IF_0::upper_threshold::-1
////	and hypE1 outputs outvariable //saturate.IF_0::output::-1
//	//Constraint: this outvariable is assigned the true case variable
//	and sg nodes decisionNode
//	and decisionNode nodes ifexprFun
//	and ifexprFun operator "IfExpr"
//	and ifexprFun children iflist
//	and truecaseTuple is element 1 of iflist ////output_0 saturate.IF_0::output::-1
//	and faslecaseTuple is element 2 of iflist //"output_1" saturate::output::1
//	and truecaseTuple children trueList
//	and truecasev is element 0 of trueList
////	and truecasev grfn_uid outvariable // the true case variable is the output in the Assign
//then
//	sg is a SimpleIfConditional
//.

//Works, but not needed for Saturation.
////IfElse conditional with the same output variable
//Stage 1
//Rule simpleIfElseConditionalR 
//if	sg is a SimpleIfConditional
//	and sg outputVar outvariable
//	and sg ifVar ifvariable
//	//Else part
//	and sg nodes assignFun2
//	and assignFun2 ftype "ASSIGN"
//	and hypE2 function assignFun2
//	and hypE2 inputs elsevariable //ex lower_threshold
//	and hypE2 outputs elseoutvariable //saturate.IF_0::output::-1
//	and outvariable sameVar elseoutvariable
//then
//	sg is a SimpleIfElseConditional
//and sg elseVar elsevariable
//.

//We don't need this. It is too strong to require
//a final else case with output=input.
//The code could be written with output=input before
//conditionals that overwrite output with thresholds.
////if else {if else}
//Stage 1
//Rule saturationR2
//if 	sg is a SimpleIfConditional
//	and	sg comparandLeft comparandL
//	and sg comparandRight comparandR 
//	and sg condOperator "Gt"
//	and sg ifVar comparandR 
//	and sg outputVar outvariable
//	//Else part is another conditional
//	and sg1 parent sg
//	and sg1 is a SimpleIfElseConditional
//	and sg1 comparandLeft sg1comparandL //saturate.IF_1::input::-1
//	and comparandL sameVar sg1comparandL
//	and sg1 comparandRight sg1comparandR //lower_threshold
//	and sg1 condOperator "Lt" 
//	and sg1 ifVar sg1comparandR //sg1ifvariable  //lower_threshold
//	and sg1 elseVar sg1comparandL // comparandL
//	and sg1 outputVar sg1outvariable
//	and sg1outvariable sameVar outvariable
//then
// 	sg is a Saturation
//and sg inputVar comparandL
//and sg outputVar outvariable
//and sg lowerThreshold sg1comparandR
//and sg upperThreshold comparandR
//.

//if else {if }
Stage 1 Rule saturationR1
if 	sg is a SimpleIfConditional
	and	sg comparandLeft comparandL
	and sg comparandRight comparandR 
	and sg condOperator "Gt"
	and sg ifVar comparandR 
	and sg outputVar outvariable
	and sg1 parent sg
	and sg1 is a SimpleIfConditional
	and sg1 comparandLeft sg1comparandL 
	and comparandL sameVar sg1comparandL
	and sg1 comparandRight sg1comparandR
	and sg1 condOperator "Lt" 
	and sg1 ifVar sg1comparandR
	and sg1 outputVar sg1outvariable
	and sg1outvariable sameVar outvariable
then
 	sg is a Saturation
and sg inputVar comparandL
and sg outputVar outvariable
and sg lowerThreshold sg1comparandR
and sg upperThreshold comparandR .


///////////// Stage 2 ///////////////////
 

// Must be Stage 2 or lower
Stage 2 Rule MultiplicationR
if	    nd is an ExpNode
	and nd operator "Mult"
	and nd children clist
	and mxx is an ExpNode
	and index of mxx in clist is idx
then    nd is a Multiplication
	and nd multiplicand mxx.

Stage 2 Rule SummationR
if	    nd is an ExpNode
	and nd operator "Add"
	and nd children clist
	and mxx is an ExpNode
	and index of mxx in clist is idx
then    nd is a Summation
	and nd summand mxx.

Stage 2 Rule SubtractionR
if	    nd is an ExpNode
	and nd operator "Sub"
	and nd children clist
	and m is element 0 of clist
	and s is element 1 of clist
then    nd is a Subtraction
	and nd minuend m
	and nd subtrahend s.

//Must be Stage 2
Stage 2 Rule constantR
if		var is a ExplicitVariable
	and var is not a NotConstant //Stage 1
then var is a Constant.

//Must be Stage 2
//Stage 2 Rule ErrorSignalR //Original
//if 		fun is an ExpressionTree
//	and edge function fun 
//	and edge outputs var
//	and var is a NotConstant  //AM 11/13 added
//	and fun nodes nd 
//	and nd is a Subtraction
//	and nd minuend rs_et
//	and nd subtrahend ms_et
//	and rs_et grfn_uid rs
//	and ms_et grfn_uid ms
//	and rs is a Constant  //AM 11/13 added
//	and ms is a NotConstant  //AM 11/13 added
//    and fun lambda expr0
//    and expr is strafter(expr0,":")
//then    
//	    var is an ErrorSignal
//	and rs is a ReferenceSignal
//	and ms is a MeasurementSignal
//	and var referenceSignal rs  
//	and var measurementSignal ms
//	and var semanticExpression expr.

Rule SubExpressionR
if	et is an Function //ExpressionTree
	and et nodes nrn
	and et nodes nd
	and nd operator op
	and op != "RETURN"
	and nd children cl
	and index of nrn in cl is idx
then
	et subExpression nrn.

Stage 2 Rule RootNodeR
if et is an Function //ExpressionTree
	and et nodes rn
	and noValue(et, subExpression, rn)
then
	et rootNode rn.

//Must be Stage 2
Stage 2 Rule ErrorSignalVarR
if 		fun is an Function //ExpressionTree
	and edge function fun 
	and edge outputs var
	and var is a NotConstant  //AM 11/13 added
	and fun nodes nd 
	and fun rootNode nd
	and nd is an ErrorSignal
	and nd referenceSignal rs  
	and nd measurementSignal ms
	and nd semanticExpression expr
then    
	    var is an ErrorSignal
	and var referenceSignal rs  
	and var measurementSignal ms
	and var semanticExpression expr.

//Must be Stage 2
Stage 2 Rule ErrorSignalNodeR
if 		fun is an Function //ExpressionTree
	and fun nodes nd 
	and nd is a Subtraction
	and nd minuend rs_et
	and nd subtrahend ms_et
	and rs_et grfn_uid rs
	and ms_et grfn_uid ms
	and rs is a Constant 
	and ms is a NotConstant 
    and fun lambda expr0
    and expr is strafter(expr0,":")
then    
	    nd is an ErrorSignal
	and rs is a ReferenceSignal
	and ms is a MeasurementSignal
	and nd referenceSignal rs  
	and nd measurementSignal ms
	and nd semanticExpression expr.

Stage 2 Rule ErrorSignalGrFN-ExpTree:
if	var is an ErrorSignal
	and etvar grfn_uid var
then
	etvar is an ErrorSignal.


Stage 2 Rule DerivativeR
if 		fun is an Function //ExpressionTree
	and edge function fun 
	and edge outputs var
	and var is a NotConstant  //AM 11/13 added
	and fun nodes nd 
	and nd is a Subtraction
	and nd minuend rs_et
	and nd subtrahend ms_et
	and ms_et grfn_uid ms
	and rs_et is a ErrorSignal 
	and ms is a NotConstant  //AM 11/13 added
then    var is a Derivative
	and ms is a PrevError.

// Case: integrates just ErrorSignal (no constant factor)
Stage 2 Rule IntegratorErrorSignalR
if  	c1 is a ErrorSignal
	and fun is an Function
    and fun ftype "ASSIGN"
    and he function fun
    and he is a HyperEdge
    and he outputs out
    and out is a NotConstant  //AM 11/13 added
    and out varName out_name
    and he inputs in1
    and in1 varName out_name
    and fun nodes n1  // now parse through the ExpressionTree, want n1 to be the "root"
    and expNode is an ExpNode
    and expNode exp_node_type "OPERATOR"
    and expNode children clist
    and n1 is element 0 of clist   // not checking if there is only 1 element in clist - do that later
    and n1 is a Summation 
	and n1 summand c1
	and n1 summand c2
    and c2 var_name out_name // so LHS is repeated in the RHS    
then out is an Integrator.

//Case: integrates Constant*ErrorSignal
Stage 2 Rule IntegratorConstTimesErrorSignalR
if  	cc2 is a ErrorSignal
	and fun is an Function
    and fun ftype "ASSIGN"
    and he function fun
    and he is a HyperEdge
    and he outputs out
    and out is a NotConstant  //AM 11/13 added
    and out varName out_name
    and he inputs in1
    and in1 varName out_name
    and fun nodes n1  // now parse through the ExpressionTree, want n1 to be the "root"
    and expNode is an ExpNode
    and expNode exp_node_type "OPERATOR"
    and expNode children clist
    and n1 is element 0 of clist   // not checking if there is only 1 element in clist - do that later
    and n1 is a Summation 
	and n1 summand c1
	and n1 summand c2
    and c2 var_name out_name // so LHS is repeated in the RHS
    and c1 is a Multiplication
    and c1 multiplicand cc1
    and cc1 grfn_uid grfncc1
    and grfncc1 is a Constant
    and c1 multiplicand cc2   
then out is an Integrator.

// This rule is still dependent on a particular order in the subtraction
//Stage 2 Rule IntegratorTypoR
//if      x is an ErrorSignal // will be using it later, this will "sequence" this rule to fire after we have identified ErrorSignal
//    and fun is an Function
//    and fun ftype "ASSIGN"
//    and he function fun
//    and he is a HyperEdge
//    and he outputs out
//    and out is a NotConstant  //AM 11/13 added
//    and out varName out_name
//    and he inputs in1
//    and in1 varName out_name
//    and fun nodes n1  // now parse through the ExpressionTree, want n1 to be the "root"
//    and expNode is an ExpNode
//    and expNode exp_node_type "OPERATOR"
//    and expNode children clist
//    and n1 is element 0 of clist   // not checking if there is only 1 element in clist - do that later
//	and n1 is a Subtraction
//	and n1 minuend c2
//	and n1 subtrahend c1 
//    and c2 var_name out_name // so LHS is repeated in the RHS    
//    and c1 is a Multiplication
//    and c1 multiplicand cc2    
//    and x varName error_signal_name
//    and cc2 var_name error_signal_name  // so ErrorSignal present in RHS
//then out is an IntegratorTypo.    

///////////// Stage 3 /////////////////// 

Stage 3 Rule IntExpNodeR // matches constant * integrator value
if      m is a Multiplication
	and m multiplicand int_var
	and int_var grfn_uid int_cand
	and int_cand is an Integrator
	and m multiplicand ki_var
	and ki_var grfn_uid ki
	and ki is a Constant
then     m is a IntExpNode 
    and m integratorConstant ki 
    and ki is a IntegratorConstant
    and m integratorVariable int_cand.

Stage 3 Rule DervExpNodeR
if      m is a Multiplication
	and m multiplicand derv_var
	and derv_var grfn_uid derv_cand
	and derv_cand is an Derivative
	and m multiplicand kd_var
	and kd_var grfn_uid kd
	and kd is a Constant
then    m is a DervExpNode 
    and m derivativeConstant kd
    and kd is a DerivativeConstant
    and m derivativeVariable derv_cand.

Stage 3 Rule PropExpNodeCandidateR1
if      m is a Multiplication
	and m multiplicand err_var
	and err_var grfn_uid err
	and err is an ErrorSignal
	and m multiplicand kp_var
	and kp_var grfn_uid kp
	and kp is a Constant
//	and kp is not an ErrorSignal //hence this is Stage 3
then    m is a PropExpNode
    and m proportionalConstant kp
    and m errorVariable err
    and kp is a ProportionalConstantCandidate .

Stage 3 Rule PropExpNodeCandidateR2
if      m is a Multiplication
	and m multiplicand err
	and err is an ErrorSignal
	and m multiplicand kp_var
	and kp_var grfn_uid kp
	and kp is a Constant
//	and kp is not an ErrorSignal //hence this is Stage 3
then    m is a PropExpNode
    and m proportionalConstant kp
    and m errorVariable err
    and kp is a ProportionalConstantCandidate .


Stage 3 Rule P-ControllerCandidateR
if  	et is a Function //ExpressionTree
	and et nodes exp
	and exp is a PropExpNode
then et is a P-ControllerCandidate.

// Must be Stage 3
Stage 3 Rule PI-ControllerCandidateR
if  	et is a P-ControllerCandidate
	and et nodes exp
	and exp is a Summation 
	and exp summand m1
	and exp summand m2
	and m1 is a PropExpNode
	and m2 is a IntExpNode
then et is a PI-ControllerCandidate.

Stage 3 Rule PD-ControllerCandidateR
if 		et is a P-ControllerCandidate
	and et nodes exp
	and exp is a Summation 
	and exp summand m1
	and exp summand m2
	and m1 is a PropExpNode
	and m2 is a DervExpNode
then et is a PD-ControllerCandidate.

Stage 3 Rule PID-ControllerCandidateR
if     et is an PI-ControllerCandidate
   and et nodes n1
   and n1 is a DervExpNode
then et is a PID-ControllerCandidate.

Stage 3 Rule lineEndR //AM 11/13 could even make it Stage 4 but keeping it in Stage 3 avoids "backtracking" in rule ControllerMetadataR
if		x metadata md
	and noValue(md,line_end)
	and md line_begin lb
then md line_end lb.

//Stage 3 Rule PControllerWithSaturationCandidateR:
//if	c is a P-ControllerCandidate
//	and sg is a Saturation
//then
//	c is a P-ControllerWithSaturationCandidate.
//
//Stage 3 Rule PIControllerWithSaturationCandidateR:
//if	c is a PI-ControllerCandidate
//	and sg is a Saturation
//then
//	c is a PI-ControllerWithSaturationCandidate.
//
//Stage 3 Rule PDControllerWithSaturationCandidate:
//if	c is a PD-ControllerCandidate
//	and sg is a Saturation
//then
//	c is a PD-ControllerWithSaturationCandidate.
//
//Stage 3 Rule PIDControllerWithSaturationCandidate:
//if	c is a PID-ControllerCandidate
//	and sg is a Saturation
//then
//	c is a PID-ControllerWithSaturation.

//
Stage 3 Rule ControllerWithSaturationCandidateR:
if	c is a ControllerCandidate
	and sg is a Saturation
then
	c is a ControllerWithSaturationCandidate.

///////////// Stage 4 /////////////////// 

Stage 4 Rule PropExpNodeR
if		et is a Controller
	and et nodes exp
	and exp proportionalConstant kp
	and kp is a ProportionalConstantCandidate
then
	kp is a ProportionalConstant.

Stage 4 Rule P-ControllerR
if		et is a P-ControllerCandidate
	and noValue(et1,rdf:type,PI-ControllerCandidate)
	and noValue(et1,rdf:type,PD-ControllerCandidate)
	and noValue(et1,rdf:type,PID-ControllerCandidate)
	and noValue(et1,rdf:type,ControllerWithSaturationCandidate)
then
	et is a P-Controller.

Stage 4 Rule P-ControllerWithSaturationR
if		et is a P-ControllerCandidate
	and et is a ControllerWithSaturationCandidate
	and noValue(et1,rdf:type,PI-ControllerCandidate)
	and noValue(et1,rdf:type,PD-ControllerCandidate)
	and noValue(et1,rdf:type,PID-ControllerCandidate)
then
	et is a P-ControllerWithSaturation.


Stage 4 Rule PI-ControllerR
if	et is a PI-ControllerCandidate
	and noValue(et1,rdf:type,PID-ControllerCandidate)
	and noValue(et1,rdf:type,ControllerWithSaturationCandidate)
then
	et is a PI-Controller.

Stage 4 Rule PI-ControllerWithSaturationR
if		et is a PI-ControllerCandidate
	and et is a ControllerWithSaturationCandidate
	and noValue(et1,rdf:type,PID-ControllerCandidate)
then
	et is a PI-ControllerWithSaturation.


Stage 4 Rule PD-ControllerR
if	et is a PD-ControllerCandidate
	and noValue(et1,rdf:type,PID-ControllerCandidate)
	and noValue(et1,rdf:type,ControllerWithSaturationCandidate)
then
	et is a PD-Controller.
	
Stage 4 Rule PD-ControlleWithSaturationR
if	et is a PD-ControllerCandidate
	and et is a ControllerWithSaturationCandidate
	and noValue(et1,rdf:type,PID-ControllerCandidate)
then
	et is a PD-ControllerWithSaturation.

Stage 4 Rule PID-ControllerR
if	et is a PID-ControllerCandidate
	and noValue(et1,rdf:type,ControllerWithSaturationCandidate)
then
	et is a PID-Controller.

Stage 4 Rule PID-ControllerWithSaturationR
if	et is a PID-ControllerCandidate
	and et is a ControllerWithSaturationCandidate
then
	et is a PID-ControllerWithSaturation.

Stage 4 Rule ControllerNameR
if 	    sg nodes exp
	and exp is a Controller
	and sg is a SubGraph
 	and sg nodes somenode
 	and somenode identifier id	
 	and exp_name is strbefore(strafter(id,"::"),"::")
 then exp constructName exp_name. 	

Stage 4 Rule ControllerMetadataR
if 	sg is a SubGraph
	and sg nodes pic
	and pic is a Controller
	and sg metadata md
 	and md line_begin lbeg
 	and md line_end lend
then    pic linebegin lbeg
	and pic lineend lend.

//Stage 5 Rule dummyR5
//if x is a Controller
//then x is a Controller.
	